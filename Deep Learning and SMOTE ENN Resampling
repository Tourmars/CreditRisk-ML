{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OUjpZdFuDRt-"
      },
      "outputs": [],
      "source": [
        "# Import required libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "from imblearn.combine import SMOTEENN\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Conv1D, Flatten, LSTM, GRU, Dropout\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "import shap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "PiIBI_niDRuC",
        "outputId": "87bfc5f1-b6fb-4b7c-eb03-f20049e3e06f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0  Age     Sex  Job Housing Saving accounts Checking account  \\\n",
              "0             0   67    male    2     own             NaN           little   \n",
              "1             1   22  female    2     own          little         moderate   \n",
              "2             2   49    male    1     own          little              NaN   \n",
              "3             3   45    male    2    free          little           little   \n",
              "4             4   53    male    2    free          little           little   \n",
              "..          ...  ...     ...  ...     ...             ...              ...   \n",
              "995         995   31  female    1     own          little              NaN   \n",
              "996         996   40    male    3     own          little           little   \n",
              "997         997   38    male    2     own          little              NaN   \n",
              "998         998   23    male    2    free          little           little   \n",
              "999         999   27    male    2     own        moderate         moderate   \n",
              "\n",
              "     Credit amount  Duration              Purpose  Risk  \n",
              "0             1169         6             radio/TV  good  \n",
              "1             5951        48             radio/TV   bad  \n",
              "2             2096        12            education  good  \n",
              "3             7882        42  furniture/equipment  good  \n",
              "4             4870        24                  car   bad  \n",
              "..             ...       ...                  ...   ...  \n",
              "995           1736        12  furniture/equipment  good  \n",
              "996           3857        30                  car  good  \n",
              "997            804        12             radio/TV  good  \n",
              "998           1845        45             radio/TV   bad  \n",
              "999           4576        45                  car  good  \n",
              "\n",
              "[1000 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-736fffa6-cb58-4279-8344-474d0c7c33ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Job</th>\n",
              "      <th>Housing</th>\n",
              "      <th>Saving accounts</th>\n",
              "      <th>Checking account</th>\n",
              "      <th>Credit amount</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Purpose</th>\n",
              "      <th>Risk</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>own</td>\n",
              "      <td>NaN</td>\n",
              "      <td>little</td>\n",
              "      <td>1169</td>\n",
              "      <td>6</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>female</td>\n",
              "      <td>2</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>moderate</td>\n",
              "      <td>5951</td>\n",
              "      <td>48</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>49</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2096</td>\n",
              "      <td>12</td>\n",
              "      <td>education</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>45</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>free</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>7882</td>\n",
              "      <td>42</td>\n",
              "      <td>furniture/equipment</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>53</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>free</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>4870</td>\n",
              "      <td>24</td>\n",
              "      <td>car</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>995</td>\n",
              "      <td>31</td>\n",
              "      <td>female</td>\n",
              "      <td>1</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1736</td>\n",
              "      <td>12</td>\n",
              "      <td>furniture/equipment</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>996</td>\n",
              "      <td>40</td>\n",
              "      <td>male</td>\n",
              "      <td>3</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>3857</td>\n",
              "      <td>30</td>\n",
              "      <td>car</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>997</td>\n",
              "      <td>38</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>NaN</td>\n",
              "      <td>804</td>\n",
              "      <td>12</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>998</td>\n",
              "      <td>23</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>free</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>1845</td>\n",
              "      <td>45</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>999</td>\n",
              "      <td>27</td>\n",
              "      <td>male</td>\n",
              "      <td>2</td>\n",
              "      <td>own</td>\n",
              "      <td>moderate</td>\n",
              "      <td>moderate</td>\n",
              "      <td>4576</td>\n",
              "      <td>45</td>\n",
              "      <td>car</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-736fffa6-cb58-4279-8344-474d0c7c33ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-736fffa6-cb58-4279-8344-474d0c7c33ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-736fffa6-cb58-4279-8344-474d0c7c33ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b14318a8-ac58-4460-af25-f1edd7628c56\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b14318a8-ac58-4460-af25-f1edd7628c56')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b14318a8-ac58-4460-af25-f1edd7628c56 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ce51c7e8-a969-4eb6-b8ab-48f8d4580fad\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ce51c7e8-a969-4eb6-b8ab-48f8d4580fad button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 0,\n        \"max\": 999,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          521,\n          737,\n          740\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 19,\n        \"max\": 75,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          34,\n          38,\n          55\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Housing\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"own\",\n          \"free\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Saving accounts\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"quite rich\",\n          \"moderate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Checking account\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"little\",\n          \"moderate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Credit amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2822,\n        \"min\": 250,\n        \"max\": 18424,\n        \"num_unique_values\": 921,\n        \"samples\": [\n          1068,\n          2326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 4,\n        \"max\": 72,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          72,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purpose\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"education\",\n          \"domestic appliances\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Risk\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"bad\",\n          \"good\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "# Load dataset (replace with actual dataset)\n",
        "data = pd.read_csv(\"/content/german_credit_data (1).csv\")\n",
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wW3xLFvMDRuD",
        "outputId": "d562f89d-74a8-43aa-8096-628e40e9e1e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-9585832cc54e>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  data[col].fillna('none', inplace=True)\n"
          ]
        }
      ],
      "source": [
        "for col in ['Saving accounts', 'Checking account']:\n",
        "    data[col].fillna('none', inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_g6DOg8_DRuE"
      },
      "outputs": [],
      "source": [
        "#Encode values for jobs\n",
        "job_mapping = {0: 'unskilled and non-res', 1: 'unskilled and res', 2: 'skilled', 3: 'highly skilled'}\n",
        "data['Job'] = data['Job'].map(job_mapping)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pdB94WWHDRuE"
      },
      "outputs": [],
      "source": [
        "# getting dummies for all the categorical variables\n",
        "dummies_columns = ['Job', 'Purpose', 'Sex', 'Housing', 'Saving accounts', 'Checking account']\n",
        "for col in dummies_columns:\n",
        "    data = data.merge(pd.get_dummies(data[col], drop_first=True, prefix=str(col)), left_index=True, right_index=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "id": "ld4ucaUHDRuF",
        "outputId": "9c7adc0d-6670-42a8-876d-ca64777a60e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  Age     Sex                Job Housing Saving accounts  \\\n",
              "0           0   67    male            skilled     own            none   \n",
              "1           1   22  female            skilled     own          little   \n",
              "2           2   49    male  unskilled and res     own          little   \n",
              "3           3   45    male            skilled    free          little   \n",
              "4           4   53    male            skilled    free          little   \n",
              "\n",
              "  Checking account  Credit amount  Duration              Purpose  ...  \\\n",
              "0           little           1169         6             radio/TV  ...   \n",
              "1         moderate           5951        48             radio/TV  ...   \n",
              "2             none           2096        12            education  ...   \n",
              "3           little           7882        42  furniture/equipment  ...   \n",
              "4           little           4870        24                  car  ...   \n",
              "\n",
              "   Sex_male  Housing_own  Housing_rent  Saving accounts_moderate  \\\n",
              "0      True         True         False                     False   \n",
              "1     False         True         False                     False   \n",
              "2      True         True         False                     False   \n",
              "3      True        False         False                     False   \n",
              "4      True        False         False                     False   \n",
              "\n",
              "   Saving accounts_none  Saving accounts_quite rich  Saving accounts_rich  \\\n",
              "0                  True                       False                 False   \n",
              "1                 False                       False                 False   \n",
              "2                 False                       False                 False   \n",
              "3                 False                       False                 False   \n",
              "4                 False                       False                 False   \n",
              "\n",
              "   Checking account_moderate  Checking account_none  Checking account_rich  \n",
              "0                      False                  False                  False  \n",
              "1                       True                  False                  False  \n",
              "2                      False                   True                  False  \n",
              "3                      False                  False                  False  \n",
              "4                      False                  False                  False  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a63d924c-11d4-4296-96cf-d7d0617f3205\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Job</th>\n",
              "      <th>Housing</th>\n",
              "      <th>Saving accounts</th>\n",
              "      <th>Checking account</th>\n",
              "      <th>Credit amount</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Purpose</th>\n",
              "      <th>...</th>\n",
              "      <th>Sex_male</th>\n",
              "      <th>Housing_own</th>\n",
              "      <th>Housing_rent</th>\n",
              "      <th>Saving accounts_moderate</th>\n",
              "      <th>Saving accounts_none</th>\n",
              "      <th>Saving accounts_quite rich</th>\n",
              "      <th>Saving accounts_rich</th>\n",
              "      <th>Checking account_moderate</th>\n",
              "      <th>Checking account_none</th>\n",
              "      <th>Checking account_rich</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>male</td>\n",
              "      <td>skilled</td>\n",
              "      <td>own</td>\n",
              "      <td>none</td>\n",
              "      <td>little</td>\n",
              "      <td>1169</td>\n",
              "      <td>6</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>female</td>\n",
              "      <td>skilled</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>moderate</td>\n",
              "      <td>5951</td>\n",
              "      <td>48</td>\n",
              "      <td>radio/TV</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>49</td>\n",
              "      <td>male</td>\n",
              "      <td>unskilled and res</td>\n",
              "      <td>own</td>\n",
              "      <td>little</td>\n",
              "      <td>none</td>\n",
              "      <td>2096</td>\n",
              "      <td>12</td>\n",
              "      <td>education</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>45</td>\n",
              "      <td>male</td>\n",
              "      <td>skilled</td>\n",
              "      <td>free</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>7882</td>\n",
              "      <td>42</td>\n",
              "      <td>furniture/equipment</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>53</td>\n",
              "      <td>male</td>\n",
              "      <td>skilled</td>\n",
              "      <td>free</td>\n",
              "      <td>little</td>\n",
              "      <td>little</td>\n",
              "      <td>4870</td>\n",
              "      <td>24</td>\n",
              "      <td>car</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a63d924c-11d4-4296-96cf-d7d0617f3205')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a63d924c-11d4-4296-96cf-d7d0617f3205 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a63d924c-11d4-4296-96cf-d7d0617f3205');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-85f295aa-1c59-4d52-97b1-c2877a24e07e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-85f295aa-1c59-4d52-97b1-c2877a24e07e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-85f295aa-1c59-4d52-97b1-c2877a24e07e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Endcode the  risk as a binary\n",
        "risk = {\"good\":0, \"bad\": 1}\n",
        "data['Risk'] = data['Risk'].map(risk)\n",
        "\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4zFVeFOoDRuG"
      },
      "outputs": [],
      "source": [
        "# drop redundant variables\n",
        "columns_to_drop = ['Job', 'Purpose','Sex','Housing','Saving accounts','Checking account']\n",
        "data.drop(columns_to_drop, axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pandj4ObDRuH"
      },
      "outputs": [],
      "source": [
        "#Create a normal distribution of the credit amount\n",
        "data['Log_Credit_Amount'] = np.log(data['Credit amount'])\n",
        "\n",
        "X = data.drop(['Risk', 'Credit amount'], axis=1).values\n",
        "y = data['Risk'].values"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "OidKQr-cRbKF",
        "outputId": "a93ae3c1-ad06-4dc7-ba15-261dce58996b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  Age  Credit amount  Duration  Risk  Job_skilled  \\\n",
              "0           0   67           1169         6     0         True   \n",
              "1           1   22           5951        48     1         True   \n",
              "2           2   49           2096        12     0        False   \n",
              "3           3   45           7882        42     0         True   \n",
              "4           4   53           4870        24     1         True   \n",
              "\n",
              "   Job_unskilled and non-res  Job_unskilled and res  Purpose_car  \\\n",
              "0                      False                  False        False   \n",
              "1                      False                  False        False   \n",
              "2                      False                   True        False   \n",
              "3                      False                  False        False   \n",
              "4                      False                  False         True   \n",
              "\n",
              "   Purpose_domestic appliances  ...  Housing_own  Housing_rent  \\\n",
              "0                        False  ...         True         False   \n",
              "1                        False  ...         True         False   \n",
              "2                        False  ...         True         False   \n",
              "3                        False  ...        False         False   \n",
              "4                        False  ...        False         False   \n",
              "\n",
              "   Saving accounts_moderate  Saving accounts_none  Saving accounts_quite rich  \\\n",
              "0                     False                  True                       False   \n",
              "1                     False                 False                       False   \n",
              "2                     False                 False                       False   \n",
              "3                     False                 False                       False   \n",
              "4                     False                 False                       False   \n",
              "\n",
              "   Saving accounts_rich  Checking account_moderate  Checking account_none  \\\n",
              "0                 False                      False                  False   \n",
              "1                 False                       True                  False   \n",
              "2                 False                      False                   True   \n",
              "3                 False                      False                  False   \n",
              "4                 False                      False                  False   \n",
              "\n",
              "   Checking account_rich  Log_Credit_Amount  \n",
              "0                  False           7.063904  \n",
              "1                  False           8.691315  \n",
              "2                  False           7.647786  \n",
              "3                  False           8.972337  \n",
              "4                  False           8.490849  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50c7f9bc-709b-4f9a-951b-474176033e92\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Age</th>\n",
              "      <th>Credit amount</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Risk</th>\n",
              "      <th>Job_skilled</th>\n",
              "      <th>Job_unskilled and non-res</th>\n",
              "      <th>Job_unskilled and res</th>\n",
              "      <th>Purpose_car</th>\n",
              "      <th>Purpose_domestic appliances</th>\n",
              "      <th>...</th>\n",
              "      <th>Housing_own</th>\n",
              "      <th>Housing_rent</th>\n",
              "      <th>Saving accounts_moderate</th>\n",
              "      <th>Saving accounts_none</th>\n",
              "      <th>Saving accounts_quite rich</th>\n",
              "      <th>Saving accounts_rich</th>\n",
              "      <th>Checking account_moderate</th>\n",
              "      <th>Checking account_none</th>\n",
              "      <th>Checking account_rich</th>\n",
              "      <th>Log_Credit_Amount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>1169</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>7.063904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>5951</td>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>8.691315</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>49</td>\n",
              "      <td>2096</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>7.647786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>45</td>\n",
              "      <td>7882</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>8.972337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>53</td>\n",
              "      <td>4870</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>8.490849</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50c7f9bc-709b-4f9a-951b-474176033e92')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50c7f9bc-709b-4f9a-951b-474176033e92 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50c7f9bc-709b-4f9a-951b-474176033e92');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ba10a635-38c4-4e78-b296-1bc376fc2d27\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba10a635-38c4-4e78-b296-1bc376fc2d27')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ba10a635-38c4-4e78-b296-1bc376fc2d27 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "P_qoI5itRbMW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GgM3SXACDRuJ"
      },
      "outputs": [],
      "source": [
        "# Normalize the features\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B-dWzLKJDRuK"
      },
      "outputs": [],
      "source": [
        "# Splitting the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZrfIVeaEDRuK"
      },
      "outputs": [],
      "source": [
        "# Apply SMOTE-ENN to balance classes\n",
        "smote_enn = SMOTEENN(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote_enn.fit_resample(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t56WYsZzDRuL"
      },
      "outputs": [],
      "source": [
        "def build_model(model_type, input_shape):\n",
        "    model = Sequential()\n",
        "    if model_type == 'CNN':\n",
        "        model.add(Conv1D(64, kernel_size=3, activation='relu', input_shape=input_shape))\n",
        "        model.add(Flatten())\n",
        "    elif model_type == 'LSTM':\n",
        "        model.add(LSTM(128, return_sequences=True, activation='relu', input_shape=input_shape))\n",
        "        model.add(LSTM(64, activation='relu'))\n",
        "    elif model_type == 'GRU':\n",
        "        model.add(GRU(128, return_sequences=True, activation='relu', input_shape=input_shape))\n",
        "        model.add(GRU(64, activation='relu'))\n",
        "    model.add(Dense(64, activation='relu'))\n",
        "    model.add(Dropout(0.3))\n",
        "    model.add(Dense(1, activation='sigmoid'))\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZaXbQbZVDRuL"
      },
      "outputs": [],
      "source": [
        "# Reshape for RNN models\n",
        "X_train_reshaped = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n",
        "X_test_reshaped = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))\n",
        "X_train_resampled_reshaped = X_train_resampled.reshape((X_train_resampled.shape[0], X_train_resampled.shape[1], 1))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hNXgMCwvDRuL",
        "outputId": "177f3ffc-c9bc-442d-f2e2-233b76adc41d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating CNN Model\n",
            "==============================\n",
            "Training CNN Before Resampling...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 22ms/step - accuracy: 0.6856 - loss: 0.6013 - val_accuracy: 0.7400 - val_loss: 0.5237 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7365 - loss: 0.5324 - val_accuracy: 0.7450 - val_loss: 0.5079 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.7676 - loss: 0.4939 - val_accuracy: 0.7350 - val_loss: 0.5151 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7549 - loss: 0.5174 - val_accuracy: 0.7500 - val_loss: 0.5138 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7540 - loss: 0.4779 - val_accuracy: 0.7450 - val_loss: 0.5192 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.7756 - loss: 0.5103 - val_accuracy: 0.7350 - val_loss: 0.5135 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7563 - loss: 0.4874 - val_accuracy: 0.7550 - val_loss: 0.5141 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7823 - loss: 0.4706\n",
            "Training CNN After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 18ms/step - accuracy: 0.8087 - loss: 0.4110 - val_accuracy: 0.6150 - val_loss: 0.7288 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - accuracy: 0.8530 - loss: 0.3187 - val_accuracy: 0.6600 - val_loss: 0.7018 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8752 - loss: 0.3230 - val_accuracy: 0.6400 - val_loss: 0.8170 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9048 - loss: 0.2540 - val_accuracy: 0.6500 - val_loss: 0.8104 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9295 - loss: 0.2274 - val_accuracy: 0.6550 - val_loss: 0.8552 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9155 - loss: 0.2252 - val_accuracy: 0.6550 - val_loss: 0.8350 - learning_rate: 2.5000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step - accuracy: 0.9119 - loss: 0.2099 - val_accuracy: 0.6550 - val_loss: 0.8355 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.6792 - loss: 0.7479\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:5 out of the last 15 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7836ff29b1a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n",
            "Classification Report for CNN:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.60      0.71       141\n",
            "           1       0.45      0.78      0.57        59\n",
            "\n",
            "    accuracy                           0.66       200\n",
            "   macro avg       0.66      0.69      0.64       200\n",
            "weighted avg       0.74      0.66      0.67       200\n",
            "\n",
            "\n",
            "==============================\n",
            "Training and Evaluating LSTM Model\n",
            "==============================\n",
            "Training LSTM Before Resampling...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 155ms/step - accuracy: 0.6351 - loss: 0.6731 - val_accuracy: 0.7050 - val_loss: 0.6198 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 151ms/step - accuracy: 0.7268 - loss: 0.6132 - val_accuracy: 0.7050 - val_loss: 0.6063 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 82ms/step - accuracy: 0.6999 - loss: 0.6135 - val_accuracy: 0.7050 - val_loss: 0.5986 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.6747 - loss: 0.6301 - val_accuracy: 0.7050 - val_loss: 0.5950 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 65ms/step - accuracy: 0.7201 - loss: 0.5886 - val_accuracy: 0.7050 - val_loss: 0.5940 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.6713 - loss: 0.6329 - val_accuracy: 0.7050 - val_loss: 0.5850 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.6919 - loss: 0.6081 - val_accuracy: 0.7050 - val_loss: 0.5778 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 105ms/step - accuracy: 0.6718 - loss: 0.6244 - val_accuracy: 0.7050 - val_loss: 0.5839 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 99ms/step - accuracy: 0.6812 - loss: 0.6163 - val_accuracy: 0.7050 - val_loss: 0.5796 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.6971 - loss: 0.5979 - val_accuracy: 0.7050 - val_loss: 0.5738 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 64ms/step - accuracy: 0.6976 - loss: 0.5911 - val_accuracy: 0.7100 - val_loss: 0.5715 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 64ms/step - accuracy: 0.6843 - loss: 0.6032 - val_accuracy: 0.7150 - val_loss: 0.5720 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 69ms/step - accuracy: 0.7276 - loss: 0.5539 - val_accuracy: 0.7100 - val_loss: 0.5724 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 117ms/step - accuracy: 0.6776 - loss: 0.5922 - val_accuracy: 0.7000 - val_loss: 0.5921 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 73ms/step - accuracy: 0.7027 - loss: 0.5936 - val_accuracy: 0.7150 - val_loss: 0.5699 - learning_rate: 5.0000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - accuracy: 0.6566 - loss: 0.6176 - val_accuracy: 0.7100 - val_loss: 0.5885 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.6973 - loss: 0.6068 - val_accuracy: 0.7150 - val_loss: 0.5789 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 67ms/step - accuracy: 0.7171 - loss: 0.5734 - val_accuracy: 0.7200 - val_loss: 0.5692 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 64ms/step - accuracy: 0.7162 - loss: 0.5795 - val_accuracy: 0.7250 - val_loss: 0.5693 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 104ms/step - accuracy: 0.6879 - loss: 0.6112 - val_accuracy: 0.7250 - val_loss: 0.5690 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.7403 - loss: 0.5369\n",
            "Training LSTM After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 74ms/step - accuracy: 0.5805 - loss: 0.6790 - val_accuracy: 0.5000 - val_loss: 0.7266 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - accuracy: 0.7115 - loss: 0.5854 - val_accuracy: 0.5050 - val_loss: 0.7933 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 130ms/step - accuracy: 0.7010 - loss: 0.5516 - val_accuracy: 0.5500 - val_loss: 0.6952 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 103ms/step - accuracy: 0.6864 - loss: 0.5776 - val_accuracy: 0.5250 - val_loss: 0.7735 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 69ms/step - accuracy: 0.7286 - loss: 0.5422 - val_accuracy: 0.5300 - val_loss: 0.8741 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 68ms/step - accuracy: 0.7011 - loss: 0.5375 - val_accuracy: 0.5300 - val_loss: 0.7780 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 69ms/step - accuracy: 0.7239 - loss: 0.5269 - val_accuracy: 0.5200 - val_loss: 0.8368 - learning_rate: 2.5000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 69ms/step - accuracy: 0.7414 - loss: 0.5129 - val_accuracy: 0.5100 - val_loss: 0.8484 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.5428 - loss: 0.7741\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 148ms/step\n",
            "Classification Report for LSTM:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.75      0.45      0.57       141\n",
            "           1       0.33      0.64      0.44        59\n",
            "\n",
            "    accuracy                           0.51       200\n",
            "   macro avg       0.54      0.55      0.50       200\n",
            "weighted avg       0.63      0.51      0.53       200\n",
            "\n",
            "\n",
            "==============================\n",
            "Training and Evaluating GRU Model\n",
            "==============================\n",
            "Training GRU Before Resampling...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 87ms/step - accuracy: 0.6669 - loss: 0.6611 - val_accuracy: 0.7050 - val_loss: 0.5920 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - accuracy: 0.6967 - loss: 0.6036 - val_accuracy: 0.7050 - val_loss: 0.5897 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 51ms/step - accuracy: 0.7177 - loss: 0.5888 - val_accuracy: 0.7050 - val_loss: 0.5868 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 86ms/step - accuracy: 0.6867 - loss: 0.6114 - val_accuracy: 0.7050 - val_loss: 0.5760 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 93ms/step - accuracy: 0.6911 - loss: 0.6086 - val_accuracy: 0.7050 - val_loss: 0.5727 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.6917 - loss: 0.6010 - val_accuracy: 0.7050 - val_loss: 0.5633 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 57ms/step - accuracy: 0.6980 - loss: 0.5901 - val_accuracy: 0.7050 - val_loss: 0.5559 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7035 - loss: 0.5744 - val_accuracy: 0.7350 - val_loss: 0.5487 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 53ms/step - accuracy: 0.7171 - loss: 0.5574 - val_accuracy: 0.7300 - val_loss: 0.5273 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7230 - loss: 0.5487 - val_accuracy: 0.7250 - val_loss: 0.5205 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 52ms/step - accuracy: 0.7144 - loss: 0.5465 - val_accuracy: 0.7100 - val_loss: 0.5771 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 87ms/step - accuracy: 0.6854 - loss: 0.5712 - val_accuracy: 0.7350 - val_loss: 0.5221 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 90ms/step - accuracy: 0.7233 - loss: 0.5339 - val_accuracy: 0.7550 - val_loss: 0.5238 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - accuracy: 0.7163 - loss: 0.5300 - val_accuracy: 0.7450 - val_loss: 0.5163 - learning_rate: 5.0000e-04\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 53ms/step - accuracy: 0.7164 - loss: 0.5404 - val_accuracy: 0.7400 - val_loss: 0.5121 - learning_rate: 5.0000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 54ms/step - accuracy: 0.7122 - loss: 0.5255 - val_accuracy: 0.7350 - val_loss: 0.5091 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 53ms/step - accuracy: 0.7222 - loss: 0.5277 - val_accuracy: 0.7450 - val_loss: 0.5074 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7187 - loss: 0.5322 - val_accuracy: 0.7350 - val_loss: 0.5192 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 91ms/step - accuracy: 0.7181 - loss: 0.5403 - val_accuracy: 0.7450 - val_loss: 0.5063 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 89ms/step - accuracy: 0.7285 - loss: 0.5209 - val_accuracy: 0.7500 - val_loss: 0.5068 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7898 - loss: 0.4746\n",
            "Training GRU After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 72ms/step - accuracy: 0.7121 - loss: 0.5728 - val_accuracy: 0.6500 - val_loss: 0.5881 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 69ms/step - accuracy: 0.8359 - loss: 0.4132 - val_accuracy: 0.6850 - val_loss: 0.6525 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 67ms/step - accuracy: 0.8514 - loss: 0.3781 - val_accuracy: 0.6450 - val_loss: 0.7164 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 115ms/step - accuracy: 0.8565 - loss: 0.3586 - val_accuracy: 0.6250 - val_loss: 0.8253 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 67ms/step - accuracy: 0.8457 - loss: 0.3561 - val_accuracy: 0.6400 - val_loss: 0.7924 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 70ms/step - accuracy: 0.8660 - loss: 0.3505 - val_accuracy: 0.6650 - val_loss: 0.7498 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.6657 - loss: 0.6888\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 110ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report for GRU:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.61      0.72       141\n",
            "           1       0.46      0.80      0.58        59\n",
            "\n",
            "    accuracy                           0.67       200\n",
            "   macro avg       0.67      0.70      0.65       200\n",
            "weighted avg       0.75      0.67      0.68       200\n",
            "\n",
            "\n",
            "✅ Best Model Saved: GRU with Accuracy: 0.6650\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Evaluate each model\n",
        "models = ['CNN', 'LSTM', 'GRU']\n",
        "results = {}\n",
        "best_accuracy = 0\n",
        "best_model = None\n",
        "best_model_name = \"\"\n",
        "\n",
        "for model_type in models:\n",
        "    print(f\"\\n{'='*30}\\nTraining and Evaluating {model_type} Model\\n{'='*30}\")\n",
        "\n",
        "    input_shape = (X_train_reshaped.shape[1], 1) if model_type in ['LSTM', 'GRU'] else (X_train.shape[1], 1)\n",
        "    model = build_model(model_type, input_shape)\n",
        "\n",
        "    # Train and evaluate before resampling\n",
        "    print(f\"Training {model_type} Before Resampling...\")\n",
        "    if model_type in ['LSTM', 'GRU']:\n",
        "        model.fit(X_train_reshaped, y_train, epochs=20, batch_size=32, validation_data=(X_test_reshaped, y_test),\n",
        "                  callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "        loss, accuracy = model.evaluate(X_test_reshaped, y_test)\n",
        "    else:\n",
        "        model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test),\n",
        "                  callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "        loss, accuracy = model.evaluate(X_test, y_test)\n",
        "    results[f\"{model_type}_before\"] = accuracy\n",
        "\n",
        "    # Train and evaluate after resampling\n",
        "    print(f\"Training {model_type} After Resampling...\")\n",
        "    if model_type in ['LSTM', 'GRU']:\n",
        "        model.fit(X_train_resampled_reshaped, y_train_resampled, epochs=20, batch_size=32, validation_data=(X_test_reshaped, y_test),\n",
        "                  callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "        loss_res, accuracy_res = model.evaluate(X_test_reshaped, y_test)\n",
        "    else:\n",
        "        model.fit(X_train_resampled, y_train_resampled, epochs=20, batch_size=32, validation_data=(X_test, y_test),\n",
        "                  callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "        loss_res, accuracy_res = model.evaluate(X_test, y_test)\n",
        "    results[f\"{model_type}_after\"] = accuracy_res\n",
        "\n",
        "    # Save the best performing model\n",
        "    if accuracy_res > best_accuracy:\n",
        "        best_accuracy = accuracy_res\n",
        "        best_model = model\n",
        "        best_model_name = model_type\n",
        "\n",
        "    # Classification Report\n",
        "    y_pred = (model.predict(X_test_reshaped if model_type in ['LSTM', 'GRU'] else X_test) > 0.5).astype(\"int32\")\n",
        "    print(f\"Classification Report for {model_type}:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# After all models are evaluated, save the best one\n",
        "if best_model is not None:\n",
        "    best_model.save('best_model.h5')\n",
        "    print(f\"\\n✅ Best Model Saved: {best_model_name} with Accuracy: {best_accuracy:.4f}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "boiC-GTuDRuM",
        "outputId": "bec95cac-753b-4716-aa93-c78bf0a1a414"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Final Results:\n",
            "CNN_before: 74.00%\n",
            "CNN_after: 65.00%\n",
            "LSTM_before: 71.00%\n",
            "LSTM_after: 50.50%\n",
            "GRU_before: 73.50%\n",
            "GRU_after: 66.50%\n"
          ]
        }
      ],
      "source": [
        "# Step 3: Evaluate Models\n",
        "print(\"\\nFinal Results:\")\n",
        "for key, value in results.items():\n",
        "    print(f\"{key}: {value * 100:.2f}%\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Tk8u5tgDRuM",
        "outputId": "69c4c0f4-fc1e-4c33-ee89-1d0844d277dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Best-performing model: CNN\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/models/functional.py:237: UserWarning: The structure of `inputs` doesn't match the expected structure.\n",
            "Expected: keras_tensor_32\n",
            "Received: inputs=['Tensor(shape=(200, 24, 1))']\n",
            "  warnings.warn(msg)\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/models/functional.py:237: UserWarning: The structure of `inputs` doesn't match the expected structure.\n",
            "Expected: keras_tensor_32\n",
            "Received: inputs=['Tensor(shape=(50, 24, 1))']\n",
            "  warnings.warn(msg)\n"
          ]
        }
      ],
      "source": [
        "# Step 4: Interpretation with SHAP\n",
        "best_model_type = max(results, key=results.get).split('_')[0]\n",
        "print(f\"\\nBest-performing model: {best_model_type}\")\n",
        "\n",
        "explainer = shap.GradientExplainer(model, X_train_resampled_reshaped)\n",
        "shap_values = explainer.shap_values(X_test_reshaped)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Impact of different SMOTE versions on german credit data sets.**\n"
      ],
      "metadata": {
        "id": "mflf9e0-UNL9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE, BorderlineSMOTE\n",
        "from imblearn.combine import SMOTEENN, SMOTETomek\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "from tensorflow.keras.models import load_model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "# Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define SMOTE variants\n",
        "smote_variants = {\n",
        "    'SMOTE': SMOTE(random_state=42),\n",
        "    'BorderlineSMOTE': BorderlineSMOTE(random_state=42),\n",
        "    'SMOTEENN': SMOTEENN(random_state=42),\n",
        "    'SMOTETomek': SMOTETomek(random_state=42)\n",
        "}\n",
        "\n",
        "# Models to evaluate\n",
        "models = ['CNN', 'LSTM', 'GRU']\n",
        "overall_results = {}\n",
        "best_accuracy = 0\n",
        "best_model = None\n",
        "best_model_name = \"\"\n",
        "best_smote_name = \"\"\n",
        "\n",
        "for smote_name, sampler in smote_variants.items():\n",
        "    print(f\"\\n{'#'*40}\\nApplying {smote_name}\\n{'#'*40}\")\n",
        "\n",
        "    # Apply SMOTE\n",
        "    X_train_resampled, y_train_resampled = sampler.fit_resample(X_train, y_train)\n",
        "\n",
        "    # Reshape if needed\n",
        "    X_train_reshaped = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n",
        "    X_test_reshaped = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))\n",
        "    X_train_resampled_reshaped = X_train_resampled.reshape((X_train_resampled.shape[0], X_train_resampled.shape[1], 1))\n",
        "\n",
        "    smote_results = {}\n",
        "\n",
        "    for model_type in models:\n",
        "        print(f\"\\n{'='*30}\\nTraining and Evaluating {model_type} Model with {smote_name}\\n{'='*30}\")\n",
        "\n",
        "        input_shape = (X_train_reshaped.shape[1], 1) if model_type in ['LSTM', 'GRU'] else (X_train.shape[1], 1)\n",
        "        model = build_model(model_type, input_shape)\n",
        "\n",
        "        # Train and evaluate BEFORE resampling\n",
        "        print(f\"Training {model_type} Before Resampling...\")\n",
        "        if model_type in ['LSTM', 'GRU']:\n",
        "            model.fit(X_train_reshaped, y_train, epochs=20, batch_size=32, validation_data=(X_test_reshaped, y_test),\n",
        "                      callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "            loss, accuracy = model.evaluate(X_test_reshaped, y_test)\n",
        "        else:\n",
        "            model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test),\n",
        "                      callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "            loss, accuracy = model.evaluate(X_test, y_test)\n",
        "        smote_results[f\"{model_type}_before\"] = accuracy\n",
        "\n",
        "        # Train and evaluate AFTER resampling\n",
        "        print(f\"Training {model_type} After Resampling...\")\n",
        "        if model_type in ['LSTM', 'GRU']:\n",
        "            model.fit(X_train_resampled_reshaped, y_train_resampled, epochs=20, batch_size=32, validation_data=(X_test_reshaped, y_test),\n",
        "                      callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "            loss_res, accuracy_res = model.evaluate(X_test_reshaped, y_test)\n",
        "        else:\n",
        "            model.fit(X_train_resampled, y_train_resampled, epochs=20, batch_size=32, validation_data=(X_test, y_test),\n",
        "                      callbacks=[EarlyStopping(monitor='val_loss', patience=5), ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)])\n",
        "            loss_res, accuracy_res = model.evaluate(X_test, y_test)\n",
        "        smote_results[f\"{model_type}_after\"] = accuracy_res\n",
        "\n",
        "        # Save the best performing model\n",
        "        if accuracy_res > best_accuracy:\n",
        "            best_accuracy = accuracy_res\n",
        "            best_model = model\n",
        "            best_model_name = model_type\n",
        "            best_smote_name = smote_name\n",
        "\n",
        "        # Classification Report\n",
        "        y_pred = (model.predict(X_test_reshaped if model_type in ['LSTM', 'GRU'] else X_test) > 0.5).astype(\"int32\")\n",
        "        print(f\"Classification Report for {model_type} ({smote_name}):\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "        # Confusion Matrix\n",
        "        cm = confusion_matrix(y_test, y_pred)\n",
        "        plt.figure(figsize=(5,4))\n",
        "        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "        plt.title(f'Confusion Matrix - {model_type} ({smote_name})')\n",
        "        plt.xlabel('Predicted')\n",
        "        plt.ylabel('True')\n",
        "        plt.show()\n",
        "\n",
        "    overall_results[smote_name] = smote_results\n",
        "\n",
        "# After all models and SMOTE variants are evaluated\n",
        "if best_model is not None:\n",
        "    best_model.save('best_model.h5')\n",
        "    print(f\"\\n✅ Best Model Saved: {best_model_name} trained with {best_smote_name}, Accuracy: {best_accuracy:.4f}\")\n",
        "\n",
        "# Summarize Results\n",
        "final_summary = {}\n",
        "for smote_name, res in overall_results.items():\n",
        "    for model_variant, acc in res.items():\n",
        "        final_summary[f\"{model_variant}_{smote_name}\"] = acc\n",
        "\n",
        "summary_df = pd.DataFrame.from_dict(final_summary, orient='index', columns=['Accuracy'])\n",
        "summary_df.sort_values(by='Accuracy', ascending=False, inplace=True)\n",
        "print(\"\\n📈 Summary of All Results:\\n\")\n",
        "print(summary_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "M0XX1KhnUT5_",
        "outputId": "641dfe6c-61ce-4eab-c0db-09b9b786e4e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################\n",
            "Applying SMOTE\n",
            "########################################\n",
            "\n",
            "==============================\n",
            "Training and Evaluating CNN Model with SMOTE\n",
            "==============================\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training CNN Before Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 22ms/step - accuracy: 0.6304 - loss: 0.6181 - val_accuracy: 0.7100 - val_loss: 0.5484 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7499 - loss: 0.5265 - val_accuracy: 0.7400 - val_loss: 0.5219 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7620 - loss: 0.4830 - val_accuracy: 0.7350 - val_loss: 0.5315 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7476 - loss: 0.5057 - val_accuracy: 0.7550 - val_loss: 0.5180 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7559 - loss: 0.5364 - val_accuracy: 0.7500 - val_loss: 0.5333 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7692 - loss: 0.4664 - val_accuracy: 0.7400 - val_loss: 0.5166 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7633 - loss: 0.4794 - val_accuracy: 0.7400 - val_loss: 0.5280 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7629 - loss: 0.4716 - val_accuracy: 0.7500 - val_loss: 0.5124 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7664 - loss: 0.4555 - val_accuracy: 0.7400 - val_loss: 0.5183 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.7708 - loss: 0.4535 - val_accuracy: 0.7650 - val_loss: 0.5103 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8062 - loss: 0.4573 - val_accuracy: 0.7600 - val_loss: 0.5159 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7891 - loss: 0.4559 - val_accuracy: 0.7600 - val_loss: 0.5123 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7643 - loss: 0.4655 - val_accuracy: 0.7700 - val_loss: 0.5137 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8198 - loss: 0.4213 - val_accuracy: 0.7550 - val_loss: 0.5108 - learning_rate: 5.0000e-04\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8173 - loss: 0.4143 - val_accuracy: 0.7550 - val_loss: 0.5080 - learning_rate: 5.0000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7640 - loss: 0.4715 - val_accuracy: 0.7550 - val_loss: 0.5229 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7953 - loss: 0.4319 - val_accuracy: 0.7450 - val_loss: 0.5162 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8083 - loss: 0.4288 - val_accuracy: 0.7500 - val_loss: 0.5242 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8222 - loss: 0.4109 - val_accuracy: 0.7650 - val_loss: 0.5193 - learning_rate: 2.5000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8250 - loss: 0.4183 - val_accuracy: 0.7650 - val_loss: 0.5222 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.7847 - loss: 0.4785 \n",
            "Training CNN After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 21ms/step - accuracy: 0.7577 - loss: 0.4790 - val_accuracy: 0.6850 - val_loss: 0.5687 - learning_rate: 2.5000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.7799 - loss: 0.4573 - val_accuracy: 0.7350 - val_loss: 0.5444 - learning_rate: 2.5000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.7637 - loss: 0.4686 - val_accuracy: 0.7200 - val_loss: 0.5534 - learning_rate: 2.5000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7623 - loss: 0.4672 - val_accuracy: 0.7100 - val_loss: 0.5593 - learning_rate: 2.5000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8140 - loss: 0.4186 - val_accuracy: 0.6950 - val_loss: 0.5631 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.8004 - loss: 0.4370 - val_accuracy: 0.7100 - val_loss: 0.5632 - learning_rate: 1.2500e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.7935 - loss: 0.4301 - val_accuracy: 0.7100 - val_loss: 0.5649 - learning_rate: 1.2500e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7278 - loss: 0.5208\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
            "Classification Report for CNN (SMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.74      0.78       141\n",
            "           1       0.51      0.64      0.57        59\n",
            "\n",
            "    accuracy                           0.71       200\n",
            "   macro avg       0.67      0.69      0.67       200\n",
            "weighted avg       0.74      0.71      0.72       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating LSTM Model with SMOTE\n",
            "==============================\n",
            "Training LSTM Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 147ms/step - accuracy: 0.6850 - loss: 0.6661 - val_accuracy: 0.7050 - val_loss: 0.6138 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 77ms/step - accuracy: 0.6970 - loss: 0.6236 - val_accuracy: 0.7050 - val_loss: 0.5996 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.7022 - loss: 0.6144 - val_accuracy: 0.7050 - val_loss: 0.5947 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - accuracy: 0.7158 - loss: 0.5897 - val_accuracy: 0.7050 - val_loss: 0.5898 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.7037 - loss: 0.6004 - val_accuracy: 0.7050 - val_loss: 0.5857 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 75ms/step - accuracy: 0.6999 - loss: 0.5999 - val_accuracy: 0.7050 - val_loss: 0.5938 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 119ms/step - accuracy: 0.6881 - loss: 0.6149 - val_accuracy: 0.7050 - val_loss: 0.5811 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 68ms/step - accuracy: 0.7151 - loss: 0.5804 - val_accuracy: 0.7050 - val_loss: 0.5777 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 66ms/step - accuracy: 0.7027 - loss: 0.5971 - val_accuracy: 0.7050 - val_loss: 0.5820 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 74ms/step - accuracy: 0.6886 - loss: 0.6113 - val_accuracy: 0.7050 - val_loss: 0.5734 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 105ms/step - accuracy: 0.7106 - loss: 0.5792 - val_accuracy: 0.7100 - val_loss: 0.5717 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 67ms/step - accuracy: 0.7080 - loss: 0.5816 - val_accuracy: 0.7100 - val_loss: 0.5735 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.7035 - loss: 0.5880 - val_accuracy: 0.7050 - val_loss: 0.5745 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 93ms/step - accuracy: 0.6885 - loss: 0.5974 - val_accuracy: 0.7100 - val_loss: 0.5752 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 71ms/step - accuracy: 0.7240 - loss: 0.5645 - val_accuracy: 0.7100 - val_loss: 0.5729 - learning_rate: 5.0000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 91ms/step - accuracy: 0.7096 - loss: 0.5634 - val_accuracy: 0.7250 - val_loss: 0.5743 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.7423 - loss: 0.5417\n",
            "Training LSTM After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 74ms/step - accuracy: 0.5772 - loss: 0.7040 - val_accuracy: 0.6700 - val_loss: 0.6386 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 88ms/step - accuracy: 0.6204 - loss: 0.6626 - val_accuracy: 0.5450 - val_loss: 0.6702 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 67ms/step - accuracy: 0.6256 - loss: 0.6534 - val_accuracy: 0.6450 - val_loss: 0.6279 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.5946 - loss: 0.6631 - val_accuracy: 0.6700 - val_loss: 0.6101 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.5973 - loss: 0.6558 - val_accuracy: 0.5700 - val_loss: 0.6609 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 81ms/step - accuracy: 0.5954 - loss: 0.6613 - val_accuracy: 0.5750 - val_loss: 0.6435 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 105ms/step - accuracy: 0.6202 - loss: 0.6458 - val_accuracy: 0.5300 - val_loss: 0.6806 - learning_rate: 5.0000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.6336 - loss: 0.6486 - val_accuracy: 0.5850 - val_loss: 0.6521 - learning_rate: 2.5000e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 68ms/step - accuracy: 0.6205 - loss: 0.6515 - val_accuracy: 0.5750 - val_loss: 0.6481 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.6192 - loss: 0.6223\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 86ms/step\n",
            "Classification Report for LSTM (SMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.57      0.65       141\n",
            "           1       0.36      0.59      0.45        59\n",
            "\n",
            "    accuracy                           0.57       200\n",
            "   macro avg       0.57      0.58      0.55       200\n",
            "weighted avg       0.65      0.57      0.59       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "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QggXFxcxf/589f78/HxRp04ddTtCCOHv7y8+/PBDIYQQSUlJAoA4cOBAsX08fPiwACDu37+vLsvNzRU1a9YUv/zyi0bd4cOHi8GDBwshhIiIiBDe3t4a+ydNmqR1LCK54zUzkoRdu3bB0tIS+fn5KCwsxJAhQzBjxgyMHj0azZo107hOdvbsWVy5cgVWVlYax8jNzcXVq1eRmZmJ1NRUje90q1GjBlq3bq011VgkMTERxsbG8Pf3L3Wfr1y5gocPH6J79+4a5Xl5efDx8QEAXLx4Ueu75fgt4ETaGGYkCV26dMGqVatgamoKV1dX1Kjx70fbwsJCo252djZ8fX0RExOjdRxHR8cytW9ubq7za7KzswEAP/74I1544QWNfUqlskz9IJIrhhlJgoWFBRo2bFiquq1atcK3336L2rVrw9rautg6Li4uOHnyJDp37gwAePz4MRISEtCqVati6zdr1gyFhYU4evQoAgICtPYXjQwLCgrUZd7e3lAqlUhOTi5xROfl5YUffvhBo+zEiRPPP0kimeECEJKdN954A7Vq1UJQUBB++uknXL9+HUeOHMEHH3yAv//+GwDw4YcfYt68edixYwcuXbqE995775n3iHl4eCA0NBRvvfUWduzYoT7m5s2bAQDu7u5QKBTYtWsXbt++jezsbFhZWWHChAkYN24c1q9fj6tXr+LMmTNYtmwZ1q9fDwB45513cPnyZUycOBFJSUmIjY3FunXrKvstIjI4DDOSnZo1a+LYsWNwc3NDcHAwvLy8MHz4cOTm5qpHauPHj8f//vc/hIaGws/PD1ZWVnjttdeeedxVq1ahf//+eO+99+Dp6YmRI0ciJycHAPDCCy9g5syZmDx5MpycnPD+++8DAGbNmoWpU6ciKioKXl5e6NmzJ3788UfUq1cPAODm5obvvvsOO3bsQIsWLbB69WrMnTu3Et8dIsOkECVd0SYiIjIQHJkREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHBY5gREZHB+38MLv1gcDj4lAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating GRU Model with SMOTE\n",
            "==============================\n",
            "Training GRU Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 83ms/step - accuracy: 0.6736 - loss: 0.6622 - val_accuracy: 0.7050 - val_loss: 0.5974 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - accuracy: 0.7216 - loss: 0.5884 - val_accuracy: 0.7050 - val_loss: 0.5935 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7092 - loss: 0.6006 - val_accuracy: 0.7050 - val_loss: 0.5864 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - accuracy: 0.6996 - loss: 0.5970 - val_accuracy: 0.7050 - val_loss: 0.5761 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 103ms/step - accuracy: 0.7170 - loss: 0.5904 - val_accuracy: 0.7050 - val_loss: 0.5855 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 54ms/step - accuracy: 0.7124 - loss: 0.5835 - val_accuracy: 0.7050 - val_loss: 0.5739 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 54ms/step - accuracy: 0.6871 - loss: 0.5884 - val_accuracy: 0.7050 - val_loss: 0.5571 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7121 - loss: 0.5605 - val_accuracy: 0.7050 - val_loss: 0.5487 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 54ms/step - accuracy: 0.6931 - loss: 0.5829 - val_accuracy: 0.7250 - val_loss: 0.5367 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 92ms/step - accuracy: 0.6937 - loss: 0.5830 - val_accuracy: 0.7250 - val_loss: 0.5358 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 82ms/step - accuracy: 0.7266 - loss: 0.5401 - val_accuracy: 0.7250 - val_loss: 0.5298 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7061 - loss: 0.5499 - val_accuracy: 0.7450 - val_loss: 0.5246 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7094 - loss: 0.5686 - val_accuracy: 0.7250 - val_loss: 0.5159 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 53ms/step - accuracy: 0.7226 - loss: 0.5511 - val_accuracy: 0.7050 - val_loss: 0.5101 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 54ms/step - accuracy: 0.7149 - loss: 0.5685 - val_accuracy: 0.7300 - val_loss: 0.5137 - learning_rate: 0.0010\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7195 - loss: 0.5620 - val_accuracy: 0.7250 - val_loss: 0.5051 - learning_rate: 0.0010\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 0.7176 - loss: 0.5396 - val_accuracy: 0.7150 - val_loss: 0.5136 - learning_rate: 0.0010\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 94ms/step - accuracy: 0.7195 - loss: 0.5372 - val_accuracy: 0.7150 - val_loss: 0.5111 - learning_rate: 0.0010\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7273 - loss: 0.5344 - val_accuracy: 0.7050 - val_loss: 0.5011 - learning_rate: 0.0010\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7450 - loss: 0.5008 - val_accuracy: 0.7250 - val_loss: 0.5146 - learning_rate: 0.0010\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7589 - loss: 0.4923\n",
            "Training GRU After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 65ms/step - accuracy: 0.6759 - loss: 0.6061 - val_accuracy: 0.6850 - val_loss: 0.5773 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 108ms/step - accuracy: 0.6936 - loss: 0.6034 - val_accuracy: 0.7150 - val_loss: 0.5342 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 62ms/step - accuracy: 0.7050 - loss: 0.5790 - val_accuracy: 0.7300 - val_loss: 0.5399 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - accuracy: 0.6902 - loss: 0.5871 - val_accuracy: 0.7250 - val_loss: 0.5645 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 61ms/step - accuracy: 0.7181 - loss: 0.5582 - val_accuracy: 0.6400 - val_loss: 0.6435 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 92ms/step - accuracy: 0.7138 - loss: 0.5874 - val_accuracy: 0.7100 - val_loss: 0.5492 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 80ms/step - accuracy: 0.7054 - loss: 0.5868 - val_accuracy: 0.7200 - val_loss: 0.5741 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7476 - loss: 0.5479\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 99ms/step\n",
            "Classification Report for GRU (SMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.69      0.78       141\n",
            "           1       0.52      0.80      0.63        59\n",
            "\n",
            "    accuracy                           0.72       200\n",
            "   macro avg       0.70      0.74      0.70       200\n",
            "weighted avg       0.78      0.72      0.73       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################\n",
            "Applying BorderlineSMOTE\n",
            "########################################\n",
            "\n",
            "==============================\n",
            "Training and Evaluating CNN Model with BorderlineSMOTE\n",
            "==============================\n",
            "Training CNN Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 30ms/step - accuracy: 0.6781 - loss: 0.5982 - val_accuracy: 0.7350 - val_loss: 0.5298 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.7431 - loss: 0.5219 - val_accuracy: 0.7300 - val_loss: 0.5399 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 19ms/step - accuracy: 0.7663 - loss: 0.5083 - val_accuracy: 0.7400 - val_loss: 0.5140 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - accuracy: 0.7386 - loss: 0.5303 - val_accuracy: 0.7550 - val_loss: 0.5259 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step - accuracy: 0.7458 - loss: 0.5231 - val_accuracy: 0.7600 - val_loss: 0.5099 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 18ms/step - accuracy: 0.7712 - loss: 0.4782 - val_accuracy: 0.7400 - val_loss: 0.5292 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7455 - loss: 0.4985 - val_accuracy: 0.7450 - val_loss: 0.5059 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7481 - loss: 0.4822 - val_accuracy: 0.7450 - val_loss: 0.5113 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7528 - loss: 0.5189 - val_accuracy: 0.7450 - val_loss: 0.5202 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7459 - loss: 0.4788 - val_accuracy: 0.7550 - val_loss: 0.5149 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7835 - loss: 0.4396 - val_accuracy: 0.7400 - val_loss: 0.5163 - learning_rate: 5.0000e-04\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7841 - loss: 0.4330 - val_accuracy: 0.7450 - val_loss: 0.5137 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.7670 - loss: 0.4827 \n",
            "Training CNN After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7783 - loss: 0.4884 - val_accuracy: 0.6950 - val_loss: 0.5631 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7575 - loss: 0.5050 - val_accuracy: 0.6750 - val_loss: 0.6002 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7813 - loss: 0.4783 - val_accuracy: 0.6900 - val_loss: 0.5712 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8027 - loss: 0.4568 - val_accuracy: 0.7000 - val_loss: 0.5420 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7767 - loss: 0.4810 - val_accuracy: 0.7250 - val_loss: 0.5506 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8210 - loss: 0.4287 - val_accuracy: 0.7050 - val_loss: 0.5732 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.8042 - loss: 0.4333 - val_accuracy: 0.6850 - val_loss: 0.5840 - learning_rate: 5.0000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.8173 - loss: 0.4312 - val_accuracy: 0.6850 - val_loss: 0.5821 - learning_rate: 2.5000e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8182 - loss: 0.4251 - val_accuracy: 0.7050 - val_loss: 0.5709 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.7224 - loss: 0.5545 \n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "Classification Report for CNN (BorderlineSMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.77      0.79       141\n",
            "           1       0.50      0.54      0.52        59\n",
            "\n",
            "    accuracy                           0.70       200\n",
            "   macro avg       0.65      0.66      0.65       200\n",
            "weighted avg       0.71      0.70      0.71       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating LSTM Model with BorderlineSMOTE\n",
            "==============================\n",
            "Training LSTM Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 94ms/step - accuracy: 0.6467 - loss: 0.6720 - val_accuracy: 0.7050 - val_loss: 0.6171 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.6808 - loss: 0.6310 - val_accuracy: 0.7050 - val_loss: 0.5989 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 72ms/step - accuracy: 0.7014 - loss: 0.6074 - val_accuracy: 0.7050 - val_loss: 0.5968 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 63ms/step - accuracy: 0.6873 - loss: 0.6164 - val_accuracy: 0.7050 - val_loss: 0.5907 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 78ms/step - accuracy: 0.7084 - loss: 0.5983 - val_accuracy: 0.7050 - val_loss: 0.5881 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 118ms/step - accuracy: 0.6963 - loss: 0.6036 - val_accuracy: 0.7050 - val_loss: 0.5845 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 69ms/step - accuracy: 0.6967 - loss: 0.6073 - val_accuracy: 0.7050 - val_loss: 0.5858 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 73ms/step - accuracy: 0.7075 - loss: 0.5930 - val_accuracy: 0.7050 - val_loss: 0.5815 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.7055 - loss: 0.5958 - val_accuracy: 0.7050 - val_loss: 0.5778 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - accuracy: 0.6935 - loss: 0.5946 - val_accuracy: 0.7050 - val_loss: 0.5743 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 114ms/step - accuracy: 0.6679 - loss: 0.6336 - val_accuracy: 0.7050 - val_loss: 0.5760 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.7327 - loss: 0.5525 - val_accuracy: 0.7000 - val_loss: 0.6020 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 67ms/step - accuracy: 0.6820 - loss: 0.6027 - val_accuracy: 0.7050 - val_loss: 0.5724 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 67ms/step - accuracy: 0.6708 - loss: 0.6039 - val_accuracy: 0.7050 - val_loss: 0.5729 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.7244 - loss: 0.5561 - val_accuracy: 0.7100 - val_loss: 0.5779 - learning_rate: 0.0010\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 72ms/step - accuracy: 0.7062 - loss: 0.5862 - val_accuracy: 0.7050 - val_loss: 0.5849 - learning_rate: 0.0010\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 117ms/step - accuracy: 0.6980 - loss: 0.5776 - val_accuracy: 0.7050 - val_loss: 0.5694 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 67ms/step - accuracy: 0.7010 - loss: 0.5669 - val_accuracy: 0.7100 - val_loss: 0.5722 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 73ms/step - accuracy: 0.7125 - loss: 0.5557 - val_accuracy: 0.7150 - val_loss: 0.5725 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 71ms/step - accuracy: 0.7204 - loss: 0.5657 - val_accuracy: 0.7150 - val_loss: 0.5733 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - accuracy: 0.7315 - loss: 0.5365\n",
            "Training LSTM After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 74ms/step - accuracy: 0.5855 - loss: 0.6983 - val_accuracy: 0.5500 - val_loss: 0.6663 - learning_rate: 2.5000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - accuracy: 0.6225 - loss: 0.6573 - val_accuracy: 0.6000 - val_loss: 0.6417 - learning_rate: 2.5000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 71ms/step - accuracy: 0.6430 - loss: 0.6509 - val_accuracy: 0.5650 - val_loss: 0.6550 - learning_rate: 2.5000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 93ms/step - accuracy: 0.6496 - loss: 0.6500 - val_accuracy: 0.6600 - val_loss: 0.6220 - learning_rate: 2.5000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 105ms/step - accuracy: 0.6177 - loss: 0.6443 - val_accuracy: 0.5800 - val_loss: 0.6564 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 91ms/step - accuracy: 0.6523 - loss: 0.6347 - val_accuracy: 0.5700 - val_loss: 0.6572 - learning_rate: 2.5000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 70ms/step - accuracy: 0.6576 - loss: 0.6329 - val_accuracy: 0.6000 - val_loss: 0.6456 - learning_rate: 2.5000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 78ms/step - accuracy: 0.6300 - loss: 0.6457 - val_accuracy: 0.6250 - val_loss: 0.6371 - learning_rate: 1.2500e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 124ms/step - accuracy: 0.6494 - loss: 0.6324 - val_accuracy: 0.6100 - val_loss: 0.6440 - learning_rate: 1.2500e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step - accuracy: 0.6599 - loss: 0.6167\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 99ms/step\n",
            "Classification Report for LSTM (BorderlineSMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.62      0.69       141\n",
            "           1       0.39      0.59      0.47        59\n",
            "\n",
            "    accuracy                           0.61       200\n",
            "   macro avg       0.59      0.61      0.58       200\n",
            "weighted avg       0.67      0.61      0.63       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating GRU Model with BorderlineSMOTE\n",
            "==============================\n",
            "Training GRU Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 87ms/step - accuracy: 0.6854 - loss: 0.6576 - val_accuracy: 0.7050 - val_loss: 0.5899 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 103ms/step - accuracy: 0.7189 - loss: 0.5954 - val_accuracy: 0.7050 - val_loss: 0.5965 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step - accuracy: 0.6810 - loss: 0.6120 - val_accuracy: 0.7050 - val_loss: 0.5782 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 59ms/step - accuracy: 0.6906 - loss: 0.6024 - val_accuracy: 0.7050 - val_loss: 0.5734 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 58ms/step - accuracy: 0.7074 - loss: 0.5926 - val_accuracy: 0.7050 - val_loss: 0.5689 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 0.6824 - loss: 0.5884 - val_accuracy: 0.7050 - val_loss: 0.5622 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 92ms/step - accuracy: 0.6838 - loss: 0.5837 - val_accuracy: 0.7050 - val_loss: 0.5566 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 87ms/step - accuracy: 0.6843 - loss: 0.5788 - val_accuracy: 0.7050 - val_loss: 0.5526 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.7015 - loss: 0.5606 - val_accuracy: 0.7150 - val_loss: 0.5474 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 58ms/step - accuracy: 0.7100 - loss: 0.5687 - val_accuracy: 0.7350 - val_loss: 0.5262 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 59ms/step - accuracy: 0.6939 - loss: 0.5533 - val_accuracy: 0.7400 - val_loss: 0.5169 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 55ms/step - accuracy: 0.7075 - loss: 0.5584 - val_accuracy: 0.7400 - val_loss: 0.5130 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 89ms/step - accuracy: 0.7022 - loss: 0.5575 - val_accuracy: 0.7250 - val_loss: 0.5129 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 93ms/step - accuracy: 0.6969 - loss: 0.5734 - val_accuracy: 0.7150 - val_loss: 0.5133 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.6936 - loss: 0.5474 - val_accuracy: 0.7350 - val_loss: 0.5140 - learning_rate: 0.0010\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 55ms/step - accuracy: 0.7167 - loss: 0.5557 - val_accuracy: 0.7300 - val_loss: 0.5120 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 55ms/step - accuracy: 0.7402 - loss: 0.5337 - val_accuracy: 0.7250 - val_loss: 0.5154 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 0.7336 - loss: 0.5201 - val_accuracy: 0.7400 - val_loss: 0.5030 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.7123 - loss: 0.5601 - val_accuracy: 0.7200 - val_loss: 0.5060 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 83ms/step - accuracy: 0.7575 - loss: 0.5062 - val_accuracy: 0.7400 - val_loss: 0.5175 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - accuracy: 0.7862 - loss: 0.4936\n",
            "Training GRU After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 65ms/step - accuracy: 0.6672 - loss: 0.6222 - val_accuracy: 0.7150 - val_loss: 0.5380 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 64ms/step - accuracy: 0.6797 - loss: 0.6013 - val_accuracy: 0.7100 - val_loss: 0.5714 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 64ms/step - accuracy: 0.7266 - loss: 0.5726 - val_accuracy: 0.6650 - val_loss: 0.6162 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 92ms/step - accuracy: 0.6898 - loss: 0.5925 - val_accuracy: 0.7100 - val_loss: 0.5731 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 83ms/step - accuracy: 0.7060 - loss: 0.5712 - val_accuracy: 0.7050 - val_loss: 0.5808 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 63ms/step - accuracy: 0.6998 - loss: 0.5769 - val_accuracy: 0.6800 - val_loss: 0.5914 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.7151 - loss: 0.5675\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 99ms/step\n",
            "Classification Report for GRU (BorderlineSMOTE):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.63      0.74       141\n",
            "           1       0.47      0.80      0.59        59\n",
            "\n",
            "    accuracy                           0.68       200\n",
            "   macro avg       0.68      0.71      0.67       200\n",
            "weighted avg       0.76      0.68      0.69       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################\n",
            "Applying SMOTEENN\n",
            "########################################\n",
            "\n",
            "==============================\n",
            "Training and Evaluating CNN Model with SMOTEENN\n",
            "==============================\n",
            "Training CNN Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 30ms/step - accuracy: 0.6836 - loss: 0.6120 - val_accuracy: 0.7250 - val_loss: 0.5363 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.7383 - loss: 0.5256 - val_accuracy: 0.7500 - val_loss: 0.5191 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step - accuracy: 0.7495 - loss: 0.5083 - val_accuracy: 0.7700 - val_loss: 0.5161 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.7308 - loss: 0.5258 - val_accuracy: 0.7450 - val_loss: 0.5252 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 19ms/step - accuracy: 0.7724 - loss: 0.4787 - val_accuracy: 0.7400 - val_loss: 0.5042 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 19ms/step - accuracy: 0.7771 - loss: 0.4765 - val_accuracy: 0.7500 - val_loss: 0.5166 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7613 - loss: 0.4778 - val_accuracy: 0.7400 - val_loss: 0.5027 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.7520 - loss: 0.4925 - val_accuracy: 0.7350 - val_loss: 0.5107 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7575 - loss: 0.4970 - val_accuracy: 0.7500 - val_loss: 0.5072 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7728 - loss: 0.4717 - val_accuracy: 0.7550 - val_loss: 0.5110 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7398 - loss: 0.4777 - val_accuracy: 0.7500 - val_loss: 0.4987 - learning_rate: 5.0000e-04\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.7579 - loss: 0.4614 - val_accuracy: 0.7450 - val_loss: 0.5080 - learning_rate: 5.0000e-04\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7684 - loss: 0.4609 - val_accuracy: 0.7550 - val_loss: 0.5103 - learning_rate: 5.0000e-04\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7858 - loss: 0.4634 - val_accuracy: 0.7600 - val_loss: 0.5114 - learning_rate: 5.0000e-04\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7842 - loss: 0.4454 - val_accuracy: 0.7550 - val_loss: 0.5105 - learning_rate: 2.5000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7789 - loss: 0.4518 - val_accuracy: 0.7500 - val_loss: 0.5068 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7658 - loss: 0.4676 \n",
            "Training CNN After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8351 - loss: 0.3870 - val_accuracy: 0.6900 - val_loss: 0.6078 - learning_rate: 2.5000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8980 - loss: 0.3036 - val_accuracy: 0.6650 - val_loss: 0.6935 - learning_rate: 2.5000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9179 - loss: 0.2563 - val_accuracy: 0.6750 - val_loss: 0.7020 - learning_rate: 2.5000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9170 - loss: 0.2275 - val_accuracy: 0.6800 - val_loss: 0.7245 - learning_rate: 2.5000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9138 - loss: 0.2339 - val_accuracy: 0.6650 - val_loss: 0.7402 - learning_rate: 1.2500e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8929 - loss: 0.2386 - val_accuracy: 0.6750 - val_loss: 0.7506 - learning_rate: 1.2500e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.6918 - loss: 0.7006 \n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "Classification Report for CNN (SMOTEENN):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.60      0.72       141\n",
            "           1       0.47      0.85      0.61        59\n",
            "\n",
            "    accuracy                           0.68       200\n",
            "   macro avg       0.69      0.73      0.66       200\n",
            "weighted avg       0.78      0.68      0.69       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating LSTM Model with SMOTEENN\n",
            "==============================\n",
            "Training LSTM Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 92ms/step - accuracy: 0.6360 - loss: 0.6662 - val_accuracy: 0.7050 - val_loss: 0.6125 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - accuracy: 0.6976 - loss: 0.6235 - val_accuracy: 0.7050 - val_loss: 0.5962 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 75ms/step - accuracy: 0.6793 - loss: 0.6399 - val_accuracy: 0.7050 - val_loss: 0.5896 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 69ms/step - accuracy: 0.6950 - loss: 0.6212 - val_accuracy: 0.7050 - val_loss: 0.5929 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 109ms/step - accuracy: 0.6836 - loss: 0.6129 - val_accuracy: 0.7050 - val_loss: 0.5817 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 74ms/step - accuracy: 0.7021 - loss: 0.6069 - val_accuracy: 0.7050 - val_loss: 0.5857 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - accuracy: 0.6868 - loss: 0.6057 - val_accuracy: 0.7050 - val_loss: 0.5713 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - accuracy: 0.6783 - loss: 0.6030 - val_accuracy: 0.7100 - val_loss: 0.5713 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 74ms/step - accuracy: 0.7086 - loss: 0.5904 - val_accuracy: 0.7050 - val_loss: 0.5863 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 121ms/step - accuracy: 0.6929 - loss: 0.5936 - val_accuracy: 0.7100 - val_loss: 0.5710 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 77ms/step - accuracy: 0.6989 - loss: 0.5783 - val_accuracy: 0.7150 - val_loss: 0.5760 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 67ms/step - accuracy: 0.7178 - loss: 0.5652 - val_accuracy: 0.6950 - val_loss: 0.5873 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 67ms/step - accuracy: 0.7116 - loss: 0.5848 - val_accuracy: 0.7100 - val_loss: 0.5768 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 65ms/step - accuracy: 0.6947 - loss: 0.5789 - val_accuracy: 0.7050 - val_loss: 0.5728 - learning_rate: 5.0000e-04\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 67ms/step - accuracy: 0.6935 - loss: 0.5779 - val_accuracy: 0.7150 - val_loss: 0.5947 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step - accuracy: 0.7278 - loss: 0.5523\n",
            "Training LSTM After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 76ms/step - accuracy: 0.5194 - loss: 0.7802 - val_accuracy: 0.3800 - val_loss: 0.9156 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 81ms/step - accuracy: 0.6502 - loss: 0.5956 - val_accuracy: 0.5000 - val_loss: 0.8499 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 73ms/step - accuracy: 0.6916 - loss: 0.5647 - val_accuracy: 0.6000 - val_loss: 0.6794 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 73ms/step - accuracy: 0.7172 - loss: 0.5467 - val_accuracy: 0.5050 - val_loss: 0.8258 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 110ms/step - accuracy: 0.6647 - loss: 0.5659 - val_accuracy: 0.5000 - val_loss: 0.8717 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 126ms/step - accuracy: 0.6875 - loss: 0.5693 - val_accuracy: 0.5450 - val_loss: 0.7933 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 74ms/step - accuracy: 0.7175 - loss: 0.5162 - val_accuracy: 0.5100 - val_loss: 0.8673 - learning_rate: 2.5000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 79ms/step - accuracy: 0.7157 - loss: 0.5447 - val_accuracy: 0.5000 - val_loss: 0.9016 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - accuracy: 0.5400 - loss: 0.8156\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 95ms/step\n",
            "Classification Report for LSTM (SMOTEENN):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.43      0.55       141\n",
            "           1       0.33      0.68      0.44        59\n",
            "\n",
            "    accuracy                           0.50       200\n",
            "   macro avg       0.55      0.55      0.49       200\n",
            "weighted avg       0.63      0.50      0.52       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating GRU Model with SMOTEENN\n",
            "==============================\n",
            "Training GRU Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 132ms/step - accuracy: 0.6387 - loss: 0.6589 - val_accuracy: 0.7050 - val_loss: 0.5943 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 57ms/step - accuracy: 0.6930 - loss: 0.6120 - val_accuracy: 0.7050 - val_loss: 0.5822 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.7035 - loss: 0.5972 - val_accuracy: 0.7050 - val_loss: 0.5803 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 58ms/step - accuracy: 0.6982 - loss: 0.6002 - val_accuracy: 0.7050 - val_loss: 0.5731 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 62ms/step - accuracy: 0.7166 - loss: 0.5703 - val_accuracy: 0.7050 - val_loss: 0.5726 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 89ms/step - accuracy: 0.6776 - loss: 0.5907 - val_accuracy: 0.7050 - val_loss: 0.5579 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 54ms/step - accuracy: 0.7209 - loss: 0.5366 - val_accuracy: 0.7300 - val_loss: 0.5473 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 57ms/step - accuracy: 0.6922 - loss: 0.5576 - val_accuracy: 0.7300 - val_loss: 0.5327 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - accuracy: 0.7266 - loss: 0.5583 - val_accuracy: 0.7400 - val_loss: 0.5263 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.6925 - loss: 0.5687 - val_accuracy: 0.7400 - val_loss: 0.5143 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 57ms/step - accuracy: 0.7209 - loss: 0.5363 - val_accuracy: 0.7500 - val_loss: 0.5151 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 92ms/step - accuracy: 0.7220 - loss: 0.5631 - val_accuracy: 0.7300 - val_loss: 0.5110 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 85ms/step - accuracy: 0.7061 - loss: 0.5533 - val_accuracy: 0.7300 - val_loss: 0.5276 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - accuracy: 0.7344 - loss: 0.5300 - val_accuracy: 0.7200 - val_loss: 0.5185 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 0.7525 - loss: 0.5310 - val_accuracy: 0.7100 - val_loss: 0.5475 - learning_rate: 0.0010\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 58ms/step - accuracy: 0.7245 - loss: 0.5360 - val_accuracy: 0.7400 - val_loss: 0.5092 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 0.7204 - loss: 0.5434 - val_accuracy: 0.7450 - val_loss: 0.5126 - learning_rate: 5.0000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.7362 - loss: 0.5186 - val_accuracy: 0.7250 - val_loss: 0.5171 - learning_rate: 5.0000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 98ms/step - accuracy: 0.7121 - loss: 0.5286 - val_accuracy: 0.7250 - val_loss: 0.5061 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 72ms/step - accuracy: 0.7452 - loss: 0.5325 - val_accuracy: 0.7100 - val_loss: 0.5097 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7458 - loss: 0.4836\n",
            "Training GRU After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 75ms/step - accuracy: 0.7679 - loss: 0.5205 - val_accuracy: 0.5850 - val_loss: 0.6889 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - accuracy: 0.8423 - loss: 0.4122 - val_accuracy: 0.5700 - val_loss: 0.8867 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 118ms/step - accuracy: 0.8168 - loss: 0.4254 - val_accuracy: 0.6700 - val_loss: 0.7253 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 98ms/step - accuracy: 0.8449 - loss: 0.3717 - val_accuracy: 0.6450 - val_loss: 0.8245 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 72ms/step - accuracy: 0.8519 - loss: 0.3462 - val_accuracy: 0.6300 - val_loss: 0.8458 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 71ms/step - accuracy: 0.8553 - loss: 0.3660 - val_accuracy: 0.6500 - val_loss: 0.8420 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.6459 - loss: 0.7933\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 103ms/step\n",
            "Classification Report for GRU (SMOTEENN):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.59      0.70       141\n",
            "           1       0.45      0.80      0.57        59\n",
            "\n",
            "    accuracy                           0.65       200\n",
            "   macro avg       0.66      0.69      0.64       200\n",
            "weighted avg       0.75      0.65      0.66       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "########################################\n",
            "Applying SMOTETomek\n",
            "########################################\n",
            "\n",
            "==============================\n",
            "Training and Evaluating CNN Model with SMOTETomek\n",
            "==============================\n",
            "Training CNN Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - accuracy: 0.6893 - loss: 0.5947 - val_accuracy: 0.7350 - val_loss: 0.5309 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step - accuracy: 0.7261 - loss: 0.5262 - val_accuracy: 0.7500 - val_loss: 0.5203 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - accuracy: 0.7762 - loss: 0.4801 - val_accuracy: 0.7250 - val_loss: 0.5372 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - accuracy: 0.7533 - loss: 0.5111 - val_accuracy: 0.7450 - val_loss: 0.5174 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7283 - loss: 0.5075 - val_accuracy: 0.7400 - val_loss: 0.5206 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7561 - loss: 0.4942 - val_accuracy: 0.7400 - val_loss: 0.5218 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.7450 - loss: 0.4959 - val_accuracy: 0.7200 - val_loss: 0.5272 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7714 - loss: 0.4621 - val_accuracy: 0.7350 - val_loss: 0.5225 - learning_rate: 5.0000e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7995 - loss: 0.4739 - val_accuracy: 0.7400 - val_loss: 0.5215 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7684 - loss: 0.4791 \n",
            "Training CNN After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - accuracy: 0.7330 - loss: 0.5289 - val_accuracy: 0.6800 - val_loss: 0.5707 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7616 - loss: 0.4879 - val_accuracy: 0.6650 - val_loss: 0.6061 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7878 - loss: 0.4885 - val_accuracy: 0.7150 - val_loss: 0.5585 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.7801 - loss: 0.4810 - val_accuracy: 0.7250 - val_loss: 0.5610 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7692 - loss: 0.4805 - val_accuracy: 0.7000 - val_loss: 0.5842 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7764 - loss: 0.4683 - val_accuracy: 0.7000 - val_loss: 0.6126 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.7756 - loss: 0.4607 - val_accuracy: 0.7100 - val_loss: 0.5915 - learning_rate: 2.5000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.7930 - loss: 0.4373 - val_accuracy: 0.7050 - val_loss: 0.5965 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7154 - loss: 0.5517\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\n",
            "Classification Report for CNN (SMOTETomek):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.74      0.78       141\n",
            "           1       0.50      0.63      0.56        59\n",
            "\n",
            "    accuracy                           0.70       200\n",
            "   macro avg       0.66      0.68      0.67       200\n",
            "weighted avg       0.73      0.70      0.71       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating LSTM Model with SMOTETomek\n",
            "==============================\n",
            "Training LSTM Before Resampling...\n",
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 107ms/step - accuracy: 0.6941 - loss: 0.6626 - val_accuracy: 0.7050 - val_loss: 0.6186 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 80ms/step - accuracy: 0.7098 - loss: 0.6162 - val_accuracy: 0.7050 - val_loss: 0.5981 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 76ms/step - accuracy: 0.7023 - loss: 0.6093 - val_accuracy: 0.7050 - val_loss: 0.5951 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 118ms/step - accuracy: 0.7213 - loss: 0.5914 - val_accuracy: 0.7050 - val_loss: 0.6043 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 98ms/step - accuracy: 0.6988 - loss: 0.6092 - val_accuracy: 0.7050 - val_loss: 0.5885 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 79ms/step - accuracy: 0.7008 - loss: 0.6010 - val_accuracy: 0.7050 - val_loss: 0.5829 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 83ms/step - accuracy: 0.6858 - loss: 0.6171 - val_accuracy: 0.7050 - val_loss: 0.5803 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 77ms/step - accuracy: 0.6852 - loss: 0.6096 - val_accuracy: 0.7050 - val_loss: 0.5746 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 76ms/step - accuracy: 0.7038 - loss: 0.5858 - val_accuracy: 0.7050 - val_loss: 0.5817 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 119ms/step - accuracy: 0.7179 - loss: 0.5901 - val_accuracy: 0.7100 - val_loss: 0.5784 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 102ms/step - accuracy: 0.6949 - loss: 0.5909 - val_accuracy: 0.7150 - val_loss: 0.5864 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 77ms/step - accuracy: 0.7128 - loss: 0.5890 - val_accuracy: 0.7050 - val_loss: 0.5836 - learning_rate: 5.0000e-04\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - accuracy: 0.6733 - loss: 0.5925 - val_accuracy: 0.7050 - val_loss: 0.5659 - learning_rate: 5.0000e-04\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 79ms/step - accuracy: 0.6862 - loss: 0.6046 - val_accuracy: 0.7250 - val_loss: 0.5667 - learning_rate: 5.0000e-04\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 127ms/step - accuracy: 0.7142 - loss: 0.5772 - val_accuracy: 0.7100 - val_loss: 0.5738 - learning_rate: 5.0000e-04\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 78ms/step - accuracy: 0.7221 - loss: 0.5782 - val_accuracy: 0.7200 - val_loss: 0.5725 - learning_rate: 5.0000e-04\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.7166 - loss: 0.5625 - val_accuracy: 0.7200 - val_loss: 0.5665 - learning_rate: 2.5000e-04\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 77ms/step - accuracy: 0.7171 - loss: 0.5775 - val_accuracy: 0.7250 - val_loss: 0.5653 - learning_rate: 2.5000e-04\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 82ms/step - accuracy: 0.7132 - loss: 0.5747 - val_accuracy: 0.7200 - val_loss: 0.5734 - learning_rate: 2.5000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 92ms/step - accuracy: 0.7263 - loss: 0.5687 - val_accuracy: 0.7200 - val_loss: 0.5690 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - accuracy: 0.7272 - loss: 0.5395\n",
            "Training LSTM After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 78ms/step - accuracy: 0.5805 - loss: 0.6824 - val_accuracy: 0.5800 - val_loss: 0.6556 - learning_rate: 2.5000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 79ms/step - accuracy: 0.6461 - loss: 0.6456 - val_accuracy: 0.6050 - val_loss: 0.6371 - learning_rate: 2.5000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 124ms/step - accuracy: 0.6061 - loss: 0.6632 - val_accuracy: 0.5750 - val_loss: 0.6425 - learning_rate: 2.5000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 82ms/step - accuracy: 0.6112 - loss: 0.6530 - val_accuracy: 0.5800 - val_loss: 0.6391 - learning_rate: 2.5000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 77ms/step - accuracy: 0.6166 - loss: 0.6448 - val_accuracy: 0.6050 - val_loss: 0.6314 - learning_rate: 2.5000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 79ms/step - accuracy: 0.6118 - loss: 0.6529 - val_accuracy: 0.5700 - val_loss: 0.6548 - learning_rate: 2.5000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 122ms/step - accuracy: 0.6089 - loss: 0.6535 - val_accuracy: 0.5700 - val_loss: 0.6560 - learning_rate: 2.5000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 78ms/step - accuracy: 0.6287 - loss: 0.6520 - val_accuracy: 0.5500 - val_loss: 0.6791 - learning_rate: 2.5000e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 73ms/step - accuracy: 0.6170 - loss: 0.6553 - val_accuracy: 0.5800 - val_loss: 0.6438 - learning_rate: 1.2500e-04\n",
            "Epoch 10/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 74ms/step - accuracy: 0.6348 - loss: 0.6349 - val_accuracy: 0.5750 - val_loss: 0.6536 - learning_rate: 1.2500e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step - accuracy: 0.6137 - loss: 0.6279\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 143ms/step\n",
            "Classification Report for LSTM (SMOTETomek):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.57      0.65       141\n",
            "           1       0.36      0.59      0.45        59\n",
            "\n",
            "    accuracy                           0.57       200\n",
            "   macro avg       0.57      0.58      0.55       200\n",
            "weighted avg       0.65      0.57      0.59       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==============================\n",
            "Training and Evaluating GRU Model with SMOTETomek\n",
            "==============================\n",
            "Training GRU Before Resampling...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 92ms/step - accuracy: 0.6994 - loss: 0.6458 - val_accuracy: 0.7050 - val_loss: 0.5935 - learning_rate: 0.0010\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - accuracy: 0.6878 - loss: 0.6189 - val_accuracy: 0.7050 - val_loss: 0.5875 - learning_rate: 0.0010\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 70ms/step - accuracy: 0.7003 - loss: 0.6037 - val_accuracy: 0.7050 - val_loss: 0.5845 - learning_rate: 0.0010\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 93ms/step - accuracy: 0.6995 - loss: 0.6137 - val_accuracy: 0.7050 - val_loss: 0.5751 - learning_rate: 0.0010\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 56ms/step - accuracy: 0.6969 - loss: 0.5853 - val_accuracy: 0.7050 - val_loss: 0.5706 - learning_rate: 0.0010\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step - accuracy: 0.7024 - loss: 0.5831 - val_accuracy: 0.7050 - val_loss: 0.5655 - learning_rate: 0.0010\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 63ms/step - accuracy: 0.6925 - loss: 0.5852 - val_accuracy: 0.7050 - val_loss: 0.5588 - learning_rate: 0.0010\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - accuracy: 0.6932 - loss: 0.5715 - val_accuracy: 0.7050 - val_loss: 0.5578 - learning_rate: 0.0010\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 62ms/step - accuracy: 0.7049 - loss: 0.5656 - val_accuracy: 0.7300 - val_loss: 0.5369 - learning_rate: 0.0010\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 98ms/step - accuracy: 0.6998 - loss: 0.5689 - val_accuracy: 0.7300 - val_loss: 0.5292 - learning_rate: 0.0010\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 87ms/step - accuracy: 0.6727 - loss: 0.6068 - val_accuracy: 0.7050 - val_loss: 0.5543 - learning_rate: 0.0010\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - accuracy: 0.6943 - loss: 0.5637 - val_accuracy: 0.7250 - val_loss: 0.5258 - learning_rate: 0.0010\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 0.6965 - loss: 0.5669 - val_accuracy: 0.7200 - val_loss: 0.5227 - learning_rate: 0.0010\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 61ms/step - accuracy: 0.7050 - loss: 0.5700 - val_accuracy: 0.7200 - val_loss: 0.5122 - learning_rate: 0.0010\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 61ms/step - accuracy: 0.7252 - loss: 0.5516 - val_accuracy: 0.7150 - val_loss: 0.5082 - learning_rate: 0.0010\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 63ms/step - accuracy: 0.7349 - loss: 0.5189 - val_accuracy: 0.7200 - val_loss: 0.5332 - learning_rate: 0.0010\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 59ms/step - accuracy: 0.7230 - loss: 0.5508 - val_accuracy: 0.7200 - val_loss: 0.5133 - learning_rate: 0.0010\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 98ms/step - accuracy: 0.7305 - loss: 0.5439 - val_accuracy: 0.7250 - val_loss: 0.5113 - learning_rate: 0.0010\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 91ms/step - accuracy: 0.7122 - loss: 0.5455 - val_accuracy: 0.7250 - val_loss: 0.5048 - learning_rate: 5.0000e-04\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 0.7250 - loss: 0.5234 - val_accuracy: 0.7350 - val_loss: 0.5089 - learning_rate: 5.0000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.7793 - loss: 0.4847\n",
            "Training GRU After Resampling...\n",
            "Epoch 1/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 67ms/step - accuracy: 0.6621 - loss: 0.6147 - val_accuracy: 0.7050 - val_loss: 0.5569 - learning_rate: 5.0000e-04\n",
            "Epoch 2/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 91ms/step - accuracy: 0.7114 - loss: 0.5861 - val_accuracy: 0.7150 - val_loss: 0.5527 - learning_rate: 5.0000e-04\n",
            "Epoch 3/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 66ms/step - accuracy: 0.7307 - loss: 0.5793 - val_accuracy: 0.6500 - val_loss: 0.6259 - learning_rate: 5.0000e-04\n",
            "Epoch 4/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 67ms/step - accuracy: 0.7255 - loss: 0.5690 - val_accuracy: 0.7200 - val_loss: 0.5486 - learning_rate: 5.0000e-04\n",
            "Epoch 5/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.7056 - loss: 0.5734 - val_accuracy: 0.7000 - val_loss: 0.5648 - learning_rate: 5.0000e-04\n",
            "Epoch 6/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - accuracy: 0.7027 - loss: 0.5766 - val_accuracy: 0.7000 - val_loss: 0.5988 - learning_rate: 5.0000e-04\n",
            "Epoch 7/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 114ms/step - accuracy: 0.7051 - loss: 0.5799 - val_accuracy: 0.6500 - val_loss: 0.6168 - learning_rate: 5.0000e-04\n",
            "Epoch 8/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 71ms/step - accuracy: 0.7304 - loss: 0.5554 - val_accuracy: 0.6550 - val_loss: 0.6079 - learning_rate: 2.5000e-04\n",
            "Epoch 9/20\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 66ms/step - accuracy: 0.7228 - loss: 0.5647 - val_accuracy: 0.6900 - val_loss: 0.5764 - learning_rate: 2.5000e-04\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.7189 - loss: 0.5480\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 96ms/step\n",
            "Classification Report for GRU (SMOTETomek):\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.66      0.75       141\n",
            "           1       0.48      0.76      0.59        59\n",
            "\n",
            "    accuracy                           0.69       200\n",
            "   macro avg       0.68      0.71      0.67       200\n",
            "weighted avg       0.76      0.69      0.70       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Best Model Saved: GRU trained with SMOTE, Accuracy: 0.7200\n",
            "\n",
            "📈 Summary of All Results:\n",
            "\n",
            "                             Accuracy\n",
            "CNN_before_SMOTE                0.765\n",
            "CNN_before_SMOTEENN             0.750\n",
            "CNN_before_BorderlineSMOTE      0.745\n",
            "GRU_before_BorderlineSMOTE      0.740\n",
            "CNN_before_SMOTETomek           0.740\n",
            "GRU_before_SMOTETomek           0.735\n",
            "GRU_before_SMOTE                0.725\n",
            "LSTM_before_SMOTE               0.725\n",
            "LSTM_before_SMOTETomek          0.720\n",
            "GRU_after_SMOTE                 0.720\n",
            "LSTM_before_BorderlineSMOTE     0.715\n",
            "LSTM_before_SMOTEENN            0.715\n",
            "CNN_after_SMOTE                 0.710\n",
            "GRU_before_SMOTEENN             0.710\n",
            "CNN_after_SMOTETomek            0.705\n",
            "CNN_after_BorderlineSMOTE       0.705\n",
            "GRU_after_SMOTETomek            0.690\n",
            "GRU_after_BorderlineSMOTE       0.680\n",
            "CNN_after_SMOTEENN              0.675\n",
            "GRU_after_SMOTEENN              0.650\n",
            "LSTM_after_BorderlineSMOTE      0.610\n",
            "LSTM_after_SMOTE                0.575\n",
            "LSTM_after_SMOTETomek           0.575\n",
            "LSTM_after_SMOTEENN             0.500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Real Time Prediction of the Credit Score"
      ],
      "metadata": {
        "id": "vPHkkjagSI6H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Step 1: Load the trained model\n",
        "model = load_model('/content/best_model.h5')\n",
        "\n",
        "# Step 2: Get user input\n",
        "print(\"Please provide the following details:\")\n",
        "\n",
        "age = int(input(\"Age: \"))\n",
        "sex = input(\"Sex (male/female): \").lower()\n",
        "job = int(input(\"Job (0-3): \"))  # assuming 0 to 3\n",
        "housing = input(\"Housing (own/free/rent): \").lower()\n",
        "saving_accounts = input(\"Saving accounts (little/moderate/rich/quite rich): \").lower()\n",
        "checking_account = input(\"Checking account (little/moderate/rich): \").lower()\n",
        "credit_amount = float(input(\"Credit amount: \"))\n",
        "duration = int(input(\"Duration (in months): \"))\n",
        "purpose = input(\"Purpose (car/furniture/equipment/radio/TV/education/business/domestic appliances/repairs/vacation/others): \").lower()\n",
        "\n",
        "# Step 3: Create a DataFrame\n",
        "input_data = {\n",
        "    'Age': [age],\n",
        "    'Sex': [sex],\n",
        "    'Job': [job],\n",
        "    'Housing': [housing],\n",
        "    'Saving accounts': [saving_accounts],\n",
        "    'Checking account': [checking_account],\n",
        "    'Credit amount': [credit_amount],\n",
        "    'Duration': [duration],\n",
        "    'Purpose': [purpose],\n",
        "}\n",
        "\n",
        "input_df = pd.DataFrame(input_data)\n",
        "\n",
        "# Step 4: Preprocess the input\n",
        "# Encode categorical features (must match training preprocessing!)\n",
        "input_df['Sex'] = input_df['Sex'].map({'male': 1, 'female': 0})\n",
        "input_df['Housing'] = input_df['Housing'].map({'own': 0, 'free': 1, 'rent': 2})\n",
        "input_df['Saving accounts'] = input_df['Saving accounts'].map({'little': 0, 'moderate': 1, 'rich': 2, 'quite rich': 3})\n",
        "input_df['Checking account'] = input_df['Checking account'].map({'little': 0, 'moderate': 1, 'rich': 2})\n",
        "input_df['Purpose'] = input_df['Purpose'].map({\n",
        "    'car': 0,\n",
        "    'furniture/equipment': 1,\n",
        "    'radio/tv': 2,\n",
        "    'education': 3,\n",
        "    'business': 4,\n",
        "    'domestic appliances': 5,\n",
        "    'repairs': 6,\n",
        "    'vacation/others': 7\n",
        "})\n",
        "\n",
        "# Fill any missing value (optional)\n",
        "input_df = input_df.fillna(0)\n",
        "\n",
        "# Step 5: Prepare for prediction\n",
        "input_array = input_df.to_numpy()\n",
        "input_array = input_array.reshape((input_array.shape[0], input_array.shape[1], 1))  # for LSTM/GRU models\n",
        "\n",
        "# Step 6: Predict\n",
        "prediction = model.predict(input_array)\n",
        "\n",
        "# Step 7: Output\n",
        "print(f\"\\nPrediction Score: {prediction[0][0]:.4f}\")\n",
        "print(\"Predicted Class:\", \"Good Risk\" if prediction[0][0] > 0.5 else \"Bad Risk\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jbuiq9CoSNuD",
        "outputId": "0a5fb372-9099-4718-c2a6-6de259e92b8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please provide the following details:\n",
            "Age: 49\n",
            "Sex (male/female): male\n",
            "Job (0-3): 1\n",
            "Housing (own/free/rent): own\n",
            "Saving accounts (little/moderate/rich/quite rich): little\n",
            "Checking account (little/moderate/rich): little\n",
            "Credit amount: 2096\n",
            "Duration (in months): 12\n",
            "Purpose (car/furniture/equipment/radio/TV/education/business/domestic appliances/repairs/vacation/others): education\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n",
            "\n",
            "Prediction Score: 1.0000\n",
            "Predicted Class: Good Risk\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python [conda env:base] *",
      "language": "python",
      "name": "conda-base-py"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.7"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
